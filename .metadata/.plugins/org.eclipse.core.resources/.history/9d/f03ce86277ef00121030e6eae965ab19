/*
 * sekainohajimari.cpp
 *
 *  Created on: 2013/07/16
 *      Author: yumikoy
 */

#include <windows.h>
#include <tchar.h>
#include <stdio.h>
#include <GL/glut.h>
#include <GL/gl.h>

int WindowPositionX = 100;  //生成するウィンドウ位置のX座標
int WindowPositionY = 100;  //生成するウィンドウ位置のY座標
int WindowWidth = 512;    //生成するウィンドウの幅
int WindowHeight = 512;    //生成するウィンドウの高さ
TCHAR WindowTitle[] = _T("世界の始まり");  //ウィンドウのタイトル

//----------------------------------------------------
// 関数プロトタイプ（後に呼び出す関数名と引数の宣言）
//----------------------------------------------------
void Initialize(void);
void Display(void);
//----------------------------------------------------
// メイン関数
//----------------------------------------------------
int main(int argc, char *argv[]){
  glutInit(&argc, argv);          // 環境の初期化
  glutInitWindowPosition(WindowPositionX, WindowPositionY);   // ウィンドウの位置の指定
  glutInitWindowSize(WindowWidth, WindowHeight);              // ウィンドウサイズの指定
  glutInitDisplayMode(GLUT_RGBA | GLUT_DEPTH | GLUT_DOUBLE);  // ディスプレイモードの指定
  glutCreateWindow(WindowTitle);  // ウィンドウの作成
  glutDisplayFunc(Display);       // 描画時に呼び出される関数を指定する（関数名：Display）
  Initialize();                   // 初期設定の関数を呼び出す
  glutMainLoop();                 // glutのイベント処理ループに入る。
  return 0;
}
//----------------------------------------------------
// 初期設定の関数
//----------------------------------------------------
void Initialize(void){
  glClearColor(1.0, 1.0, 0.0, 1.0);  // 背景色(消すと黒になる)(バッファを初期化するカラー情報)
  // glClearColor(GLclampf red , GLclampf green , GLclampf blue , GLclampf alpha);  // alpha : 透明度
  glEnable(GL_DEPTH_TEST);  // デプスバッファを使用：glutInitDisplayMode() で GLUT_DEPTH を指定する
}
//----------------------------------------------------
// 描画の関数
//----------------------------------------------------
//static
void Display(void) { // 消すと真っ白になる
//	printf("aaa");
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); //バッファの消去
  // ↑消すとウィンドウサイズを変えたときに背景領域のサイズが対応しない
//  glutSwapBuffers(); //glutInitDisplayMode(GLUT_DOUBLE)でダブルバッファリングを利用可
}


// TODO: デプスバッファ とは
//バッファ :
//OpenGL では、すべてのピクセルの情報を保存する領域をバッファと呼び
//ピクセルに関する1ビットの情報を保存するバッファをビットプレーンと呼びます(?)
//ビットプレーンには、RGBA　か、カラー参照テーブルを参照する値が保存されます
//多くの場合は、加法混色にアルファ値を加えた RGBA が用いられます
// TODO: ダブルバッファリング とは
